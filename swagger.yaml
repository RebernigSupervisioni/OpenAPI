openapi: 3.0.1
info:
  title: Api Provider
  description: Rebernig Supervisioni API
  termsOfService: http://swagger.io/terms/
  contact:
    email: support@rebernig.it
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
- url: /rest
tags:
- name: user
  description: User Management
- name: plants
  description: Plants Management
- name: things
  description: Things Management
- name: things metric
  description: Metric thing Management
- name: things metric history
  description: Metric history thing
- name: things alarm
  description: Alarm thing Management
paths:
  /user/login:
    post:
      tags:
      - user
      summary: Login
      requestBody:
        description: Username and password to verify
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: false
      responses:
        200:
          description: The token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      x-codegen-request-body-name: userdata
  /user/refreshToken:
    get:
      tags:
      - user
      summary: Refresh of the authorization token
      responses:
        200:
          description: The token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AccessToken'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /user/logout:
    get:
      tags:
      - user
      summary: Logout
      operationId: logoutUser
      responses:
        200:
          description: Logout response
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /user/changePassword:
    post:
      tags:
      - user
      summary: Change the user password
      operationId: changePassword
      requestBody:
        description: Old and new password
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewPasswordData'
        required: false
      responses:
        200:
          description: Change response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: newPasswordData
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user's info by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /plants/list:
    get:
      tags:
      - plants
      summary: Return a list of all plants for a specific user
      responses:
        200:
          description: The plants
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plants'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /plants/{id}/properties:
    get:
      tags:
      - plants
      summary: Return the properties (pairs key/value) of a specific plant
      operationId: getPlantProperties
      parameters:
      - name: id
        in: path
        description: The plant id
        required: true
        schema:
          type: string
      responses:
        200:
          description: The properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlantProperty'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /plants/{id}/things:
    get:
      tags:
      - plants
      summary: Return a list of all things of specific plant
      operationId: getPlantThings
      parameters:
      - name: id
        in: path
        description: The id of the plant
        required: true
        schema:
          type: string
      responses:
        200:
          description: The plants things
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThingProperty'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /things:
    get:
      tags:
      - things
      summary: Return all properties and metrics of a list of Things
      operationId: getThings
      parameters:
      - name: thingIds
        in: query
        description: The list of thing ids
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: The thing details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThingProperty'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - things
      summary: Create a new Thing
      parameters:
      - name: plantid
        in: query
        description: The id of the plant where is the thing
        required: true
        schema:
          type: string
      requestBody:
        description: New thing's properties
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ThingPropertyNoId'
        required: false
      responses:
        200:
          description: The id of the new things
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: newThings
  /things/{thingId}:
    get:
      tags:
      - things
      summary: Return all properties and metrics of a specific Thing
      operationId: getThing
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      responses:
        200:
          description: The thing details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingProperty'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
    put:
      tags:
      - things
      summary: Modify a Thing's property
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      requestBody:
        description: New property
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SingleProperty'
        required: false
      responses:
        200:
          description: Change response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: newProperty
    delete:
      tags:
      - things
      summary: Remove a Thing
      operationId: deleteThing
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      responses:
        200:
          description: The id of the deleted thing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /things/{thingId}/metrics:
    get:
      tags:
      - things metric
      summary: Return all metrics of specific thing
      operationId: getThingMetrics
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      responses:
        200:
          description: The thing metric details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Metric'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
    post:
      tags:
      - things metric
      summary: Create a new Metric
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      requestBody:
        description: New Metric
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MetricNoId'
        required: false
      responses:
        200:
          description: The id of new metric
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: newMetric
  /things/{thingId}/metrics/{metricId}:
    put:
      tags:
      - things metric
      summary: Modify a Thing metric
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      - name: metricId
        in: path
        description: The id of the metric
        required: true
        schema:
          type: string
      requestBody:
        description: New property
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SingleProperty'
        required: false
      responses:
        200:
          description: Change response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
      x-codegen-request-body-name: newProperty
    delete:
      tags:
      - things metric
      summary: Delete a Thing metric
      parameters:
      - name: thingId
        in: path
        description: The id of the thing
        required: true
        schema:
          type: string
      - name: metricId
        in: path
        description: The id of the metric
        required: true
        schema:
          type: string
      responses:
        200:
          description: Change response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /plants/{id}/alarms:
    get:
      tags:
      - plants
      summary: Return a list of all the active alerts of a plant
      operationId: getAlarms
      parameters:
      - name: id
        in: path
        description: The id of the plant
        required: true
        schema:
          type: string
      responses:
        200:
          description: Current alarms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alarm'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /plants/{id}/alarmshistory:
    get:
      tags:
      - plants
      summary: Return the historical alarm's list of a specific plant
      operationId: getAlarmsHistory
      parameters:
      - name: id
        in: path
        description: The id of the plants
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: Start date with format yyyy-MM-dd HH:mm
        required: true
        schema:
          type: string
      - name: to
        in: query
        description: End date with format yyyy-MM-dd HH:mm
        required: true
        schema:
          type: string
      responses:
        200:
          description: The alarm history for the requested plant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlarmSample'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /things/{thingsId}/metricshistory:
    get:
      tags:
      - things metric history
      summary: Returns the historical data of a Thing between two dates
      operationId: getMetricsHistory
      parameters:
      - name: thingsId
        in: path
        description: The Id of the thing
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: Start date with format yyyy-MM-dd HH:mm
        required: true
        schema:
          type: string
      - name: to
        in: query
        description: End date with format yyyy-MM-dd HH:mm
        required: true
        schema:
          type: string
      responses:
        200:
          description: The history for the requested metrics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MetricSample'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /things/{thingId}/alarmshistory:
    get:
      tags:
      - things alarm
      summary: Return the historical alarm's list of a specific Thing
      operationId: getThingAlarmsHistory
      parameters:
      - name: thingId
        in: path
        description: The id of the Thing
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: Start date with format yyyy-MM-dd HH:mm
        required: true
        schema:
          type: string
      - name: to
        in: query
        description: End date with format yyyy-MM-dd HH:mm
        required: true
        schema:
          type: string
      responses:
        200:
          description: The alarm history for the requested Thing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlarmSample'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /things/{thingId}/alarms:
    get:
      tags:
      - things alarm
      summary: Return all active alarms of a thing
      operationId: getItemAlarms
      parameters:
      - name: thingId
        in: path
        description: The id of the Thing for which the alarms are requested
        required: true
        schema:
          type: string
      responses:
        200:
          description: Current alarms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alarm'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden to requested domain, if any
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
  /things/{thingId}/alarms/{alarmId}:
    post:
      tags:
      - things alarm
      summary: Ack a specific alarm
      operationId: AckItemAlarms
      parameters:
      - name: thingId
        in: path
        description: The id of the Thing for which the alarms are requested
        required: true
        schema:
          type: string
      - name: alarmId
        in: path
        description: The id of the alarm to acknowledge
        required: true
        schema:
          type: string
      responses:
        200:
          description: The id of acked alarm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleResponse'
        401:
          description: Unauthorized (check token, if any)
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Some errors occurred, check error message
          content: {}
      security:
      - Bearer: []
components:
  schemas:
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        roles:
          type: string
        emails:
          type: string
    Plants:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        logo:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    ThingPropertyNoId:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
        subtype:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        iconPath:
          type: string
        status:
          type: number
          format: int64
    ThingProperty:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          type: string
        subtype:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        iconPath:
          type: string
        status:
          type: number
          format: int64
    ThingPropertyAndMetrics:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        type:
          type: string
        subtype:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        iconPath:
          type: string
        status:
          type: number
          format: int64
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
    Metric:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        value:
          type: number
        logged:
          type: number
        aggregFunc:
          type: string
    MetricNoId:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        value:
          type: number
        logged:
          type: number
        aggregFunc:
          type: string
    MetricSample:
      type: object
      properties:
        id:
          type: integer
          format: int64
        date:
          type: string
        value:
          type: number
    AlarmSample:
      type: object
      properties:
        metricPath:
          type: string
        name:
          type: string
        alarmDate:
          type: string
        priority:
          type: string
        eventType:
          type: string
    PlantProperty:
      type: object
      properties:
        name:
          type: string
        logo:
          type: string
        menuIcons:
          type: array
          items:
            $ref: '#/components/schemas/MenuIcons'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/SingleProperty'
    SingleProperty:
      type: object
      properties:
        prop:
          type: string
        val:
          type: string
    MenuIcons:
      type: object
      properties:
        iconLink:
          type: string
        pageName:
          type: string
    NewPasswordData:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    Alarm:
      type: object
      properties:
        thingId:
          type: integer
          format: int64
        alarmId:
          type: integer
          format: int64
        name:
          type: string
        metric:
          type: string
        alarmDate:
          type: string
        priority:
          type: string
        state:
          type: string
        value:
          type: number
          format: double
    ThingId:
      type: object
      properties:
        id:
          type: integer
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
    SimpleResponse:
      type: object
      properties:
        response:
          type: string
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
